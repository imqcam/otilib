
import sys, os
from distutils.core import setup
from distutils.extension import Extension
import numpy 

# we'd better have Cython installed, or it's a no-go
try:
    from Cython.Distutils import build_ext 
    from Cython.Build import cythonize
except:
    print("You don't seem to have Cython installed. Please get a")
    print("copy from www.cython.org and install it")
    sys.exit(1) 



# Set new environment flags.
# os.environ['CFLAGS'] = "-I@CYTHON_INCLUDE_DIR@ -O3"
# os.environ['LDFLAGS']= "-L@CYTHON_LINK_DIR@ -O3 -Wl,-O3"

os.environ['CFLAGS'] = "-I@CYTHON_INCLUDE_DIR@"
os.environ['LDFLAGS']= "-L@CYTHON_LINK_DIR@"


libraries          = ['oti']
include_dirs       = [numpy.get_include(), "@CYTHON_INCLUDE_DIR@"]
extra_compile_args = ["@DUTILS_ECARG1@","@DUTILS_ECARG2@","-O3",'-fopenmp']
# extra_link_args    = ['-fopenmp']
extra_link_args    = ['-fopenmp']
macros             = [("CYTHON_TRACE_NOGIL","1")]
language           = "c"
dependencies       = ["@CYTHONIZE_BUILD_DIR@/../lib/liboti.a"]

extensions = [ \
Extension("pyoti.core",
	sources = ["@CYTHON_SOUCE_DIR@/core.pyx"],
	include_dirs = include_dirs,
  define_macros = macros,
  libraries = libraries,
  # language = language,
  extra_compile_args = extra_compile_args,
  extra_link_args = extra_link_args,
  depends=dependencies
  ),
#
Extension("pyoti.real",
  sources = ["@CYTHON_SOUCE_DIR@/real.pyx"],
  include_dirs = include_dirs,
  define_macros = macros,
  libraries = libraries,
  # language = language,
  extra_compile_args = extra_compile_args,
  extra_link_args = extra_link_args,
  depends=dependencies
  ),
#
Extension("pyoti.dense",
	sources = ["@CYTHON_SOUCE_DIR@/dense.pyx"],
	include_dirs = include_dirs,
  define_macros = macros,
  libraries = libraries,
  # language = language,
  extra_compile_args = extra_compile_args,
  extra_link_args = extra_link_args,
  depends=dependencies
  ),
#
Extension("pyoti.sparse",
  sources = ["@CYTHON_SOUCE_DIR@/sparse.pyx"],
  include_dirs = include_dirs,
  define_macros = macros,
  libraries = libraries,
  # language = language,
  extra_compile_args = extra_compile_args,
  extra_link_args = extra_link_args,
  depends=dependencies
  ),
#
Extension("pyoti.fem",
  sources = ["@CYTHON_SOUCE_DIR@/fem.pyx"],
  include_dirs = include_dirs,
  define_macros = macros,
  libraries = libraries,
  # language = language,
  extra_compile_args = extra_compile_args,
  extra_link_args = extra_link_args,
  depends=dependencies
  ),
]





# Search for files to compile within the static module.
files=[]
src_path = "@CYTHON_SOUCE_DIR@/static/"
# r=>root, d=>directories, f=>files
for r, d, f in os.walk(src_path):
  for item in f:
    ext = item.split('.')[-1]
    if ext == 'pyx':
      files.append(os.path.join(r, item))
    # end if 
  # end for 
  break
# end for

# Add all found files to the extensions.
for f in files:
  fname = f.replace(src_path,"")
  name = fname.split(".")[0]
  extensions.append( Extension("pyoti.static."+name,
   sources = [f],                             include_dirs = include_dirs,
   define_macros = macros,                    libraries = libraries,
   extra_compile_args = extra_compile_args,   depends=dependencies         ) )
# end for 







# @CYTHON_SOURCES_NAMES@
# finally, we can pass all this to distutils
setup(
  name="pyoti",
  packages=["pyoti"],
  author = "Mauricio Aristizabal Cano",
  version = "1.0",
  ext_modules = cythonize(extensions, 
    include_path=["@CYTHONIZE_INCLUDE_DIR@"],
    # build_dir="@CYTHONIZE_BUILD_DIR@"
    ),
  # zip_safe    = False, # Only in case of Setuptools
)
# python3 setup.py build_ext -i #(If building inplace) 
