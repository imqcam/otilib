
//
//               +-----------------+
//               |                 |
//     Tleft     |                 |  Tright
//               |                 |
//               |                 |
//               +-----------------+
//



//
//               +-----------------+
//               |                 |
//     Tleft     |                 |  Tright
//               |                 |
//               |                 |
//               +-----------------+
//
load "iovtk" 
mesh Th = square(500,500);

// real k    = 0.48     ; // Thermal conductivity.
// real cp   = 3350.0   ; // Specific heat.
// real rho  = 1070.0   ; // Density of the material.
// real alpha=k/(cp*rho); // Thermal diffusivity.
// real hc   = 1200.0; // Heat convection coefficient
// real Tright = 116    ;
// real Tleft  = 50     ;
// real Tup    = 300     ;





real k    = 100   ;  // Thermal conductivity.
real alpha =1e-4  ;
real h1   =  5.0  ;  // Heat convection coefficient
real h2   = 50.0  ;  // Heat convection coefficient
real T1 = 100     ;
real T2 = 70      ;

q = 3750

real TGV = 1e30;


fespace Vh(Th,P1);

Vh T,w,T2,Tdiff;


problem heat(T,w)=
    int2d(Th)(        ( dx(w) *  dx(T)   + dy(w) *  dy(T)   ) )
   +int1d(Th,2)(     w * TGV *   T   )
   -int1d(Th,2)(     w * TGV * Tright)
   +int1d(Th,4)(     w * TGV *   T   )
   -int1d(Th,4)(     w * TGV * Tleft )
   +int1d(Th,3)(     w * TGV *   T   )
   -int1d(Th,3)(     w * TGV * ( Tleft + x*x*(Tright-Tleft) ) );


heat;

// savevtk("heat_freefem.vtk",Th,T,dataname="T");

{

	string filename= "heat_freefem.vtk";	
		
	ofstream file(filename);              // Set vtk output file

	file << "# vtk DataFile Version 4.2"  << endl << endl; // VTK's
	file << "ASCII"                       << endl;         // polydata
	file << "DATASET POLYDATA"            << endl << endl; // header

	// Save points (vertices).
	int numPoints = Th.nv;
	file << "POINTS " << numPoints << " DOUBLE" << endl;
	for (int i = 0; i < numPoints; i++){
	  file << Th(i).x << " " << Th(i).y << " " << 0.0 << endl;
	}
	file << endl;

	// Save triangles.
	int numTriangs = Th.nt;
	file << "POLYGONS " << numTriangs << " " << 4*numTriangs << endl;
	for (int i = 0; i < numTriangs; i++){
	  file << "3 " << Th[i][0] << " " << Th[i][1] << " " << Th[i][2] << endl;
	}
	file << endl;

	// Save solution.
	file << "POINT_DATA " << numPoints << endl;
	file << "SCALARS " << "Temperature" << " double" << endl;
	file << "LOOKUP_TABLE default" << endl;
	for (int i = 0; i < numPoints; i++){
	  file << T(Th(i).x, Th(i).y) << endl;
	}

	// Save solution.
	file << "VECTORS " << "vec_T" << " double" << endl;
	for (int i = 0; i < numPoints; i++){
	  file <<" 0 0 "<<T(Th(i).x, Th(i).y) << endl;
	}


	file << endl;

}
problem heat2(T2,w)=
    int2d(Th)(        ( dx(w) *  dx(T2)   + dy(w) *  dy(T2)   ) )
   +on(2, T2 = Tright)
   +on(4, T2 = Tleft )
   +on(3, T2 = ( Tleft + x*x*(Tright-Tleft) ) );
heat2;

{

	string filename= "heat_freefem2.vtk";	
		
	ofstream file(filename);              // Set vtk output file

	file << "# vtk DataFile Version 4.2"  << endl << endl; // VTK's
	file << "ASCII"                       << endl;         // polydata
	file << "DATASET POLYDATA"            << endl << endl; // header

	// Save points (vertices).
	int numPoints = Th.nv;
	file << "POINTS " << numPoints << " DOUBLE" << endl;
	for (int i = 0; i < numPoints; i++){
	  file << Th(i).x << " " << Th(i).y << " " << 0.0 << endl;
	}
	file << endl;

	// Save triangles.
	int numTriangs = Th.nt;
	file << "POLYGONS " << numTriangs << " " << 4*numTriangs << endl;
	for (int i = 0; i < numTriangs; i++){
	  file << "3 " << Th[i][0] << " " << Th[i][1] << " " << Th[i][2] << endl;
	}
	file << endl;

	// Save solution.
	file << "POINT_DATA " << numPoints << endl;
	file << "SCALARS " << "Temperature" << " double" << endl;
	file << "LOOKUP_TABLE default" << endl;
	for (int i = 0; i < numPoints; i++){
	  file << T(Th(i).x, Th(i).y) << endl;
	}

	// Save solution.
	file << "VECTORS " << "vec_T" << " double" << endl;
	for (int i = 0; i < numPoints; i++){
	  file <<" 0 0 "<<T2(Th(i).x, Th(i).y) << endl;
	}


	file << endl;

}


Tdiff = T-T2;
plot(Th,T);
plot(Th,T2);
plot(Th,Tdiff,wait=1,cmm="Hello");

