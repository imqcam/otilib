# cython: boundscheck=False 
# cython: wraparound=False 
# cython: nonecheck=False 
# cython: language_level=3
# cython: profile=False
# cython: linetrace=False
# cython: binding=True
# cython: embedsignature=False
## distutils: define_macros=CYTHON_TRACE_NOGIL=1
## distutils: libraries = oti 
## distutils: extra_compile_args = -arch i386 -arch x86_64
# filename: real.pyx




import  numpy as np                 # General numerical library
cimport numpy as np                 # C-level functions of numpy
cimport cython                      #

from pyoti.core import   number_types
from pyoti.core cimport  c_ptr_to_np_2darray_double
from c_otilib cimport *             # OTI lib in C.


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# ::::::::::::::::::::::::::::::::::     CLASS  DMAT    ::::::::::::::::::::::::::::::::::::::::::::::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
cdef class dmat:
  #---------------------------------------------------------------------------------------------------
  #------------------------------------   DEFINITION OF ATTRIBUTES   ---------------------------------
  #---------------------------------------------------------------------------------------------------
  
  #                                --->      Look in real.pxd    <---

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  # not _cinit_ to avoid creation with _new_
  def __init__(self, nrows, ncols, uint8_t FLAGS = 1): 
    """
    PURPOSE:      Python level constructor of the dmat class.

    DESCRIPTION:  Creates a new matrix.
                 
    """
    #*************************************************************************************************

    cdef uint64_t sizeOfCoefs, newSizeOfCoefs, i, j, ordi
    
    self.FLAGS = FLAGS

    self.arr = darr_createEmpty( nrows, ncols )

  #---------------------------------------------------------------------------------------------------

  #***************************************************************************************************
  def __dealloc__(self): 
    """
    PURPOSE:      Destructor of the class. 

    DESCRIPTION:  Frees all memory.
                  
    """
    #*************************************************************************************************
    # print("Deallocating memory of otinum.")
    if self.FLAGS & 1: # If memory is owned by this otinum.
      
      darr_free(&self.arr)

    #end if 
    
  #---------------------------------------------------------------------------------------------------

  #***************************************************************************************************
  @property
  def shape(self): 
    """
    PURPOSE:      Return the shape of the stored matrix. 
    """
    #*************************************************************************************************

    return (self.arr.nrows,self.arr.ncols)

  #---------------------------------------------------------------------------------------------------

  #***************************************************************************************************
  @property
  def  size(self): 
    """
    PURPOSE:      Return the size of array.                
    """
    #*************************************************************************************************

    return self.arr.size

  #---------------------------------------------------------------------------------------------------
  
  #***************************************************************************************************
  @staticmethod
  cdef dmat create(darr_t* arr, uint8_t FLAGS = 1):
    """
    PURPOSE:      C-level constructor of the class. Use this when creating objects within 
                  Cython
                  
    """
    #*************************************************************************************************

    # create new empty object:
    cdef dmat mat = <dmat> dmat.__new__(dmat)

    mat.arr = arr[0]
    mat.FLAGS = FLAGS
    
    return mat

  #--------------------------------------------------------------------------------------------------- 


  #*************************************************************************************************** 
  def __repr__(self):
    """
    PURPOSE:      A short representation of the object.
  
    """
    #*************************************************************************************************
    
    # head =  "dmat("
    # body =  "size: "+str(self.arr.size)  +  ", "
    # body += "nrows: "+str(self.arr.nrows)+  ", "
    # body += 'ncols: '+str(self.arr.ncols)
    # tail =  ")"
    # return (head + body + tail)

    cdef np.ndarray[double, ndim=2] A = self.to_numpy()

    return repr(A)

  #--------------------------------------------------------------------------------------------------- 

  #***************************************************************************************************
  def __str__(self):
    """
    PURPOSE:      Create a string representation of the object.    
    """
    #*************************************************************************************************
    
    # cdef uint64_t i,j,k=0

    # # dmat_print_fmt = 
    # head      = ''
    # body      = '['
    # for i in range(self.arr.nrows):

    #   body += '['

    #   for j in range(self.arr.ncols):

    #     body += "{:10.4f},".format(self.arr.p_data[k])
    #     k += 1 

    #   # end for

    #   body += '\b]\n '

    # # end for 
    # body = body[:len(body)-2]
    # body += ']\n'

    # tail      = ''
    
    # return (head + body + tail)

    cdef np.ndarray[double, ndim=2] A = self.to_numpy()

    return str(A)

  #---------------------------------------------------------------------------------------------------  



  #***************************************************************************************************
  def __getitem__(self, val):
    """
    PURPOSE: Get the value of an element of the item.
    """
    #*************************************************************************************************
    
    if (isinstance(val, int)):
    
      return darr_get_item_i( &self.arr, val)
    
    else:

      return darr_get_item_ij( &self.arr, val[0], val[1])

    # end if

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __setitem__(self, val, coeff_t value):
    """
    PURPOSE: Set an element of the item to the specified value.
    """
    #*************************************************************************************************
    
    
    if (isinstance(val, int)):

      darr_set_item_i( value, val, &self.arr)

    else:

      darr_set_item_ij( value , val[0], val[1], &self.arr)

    # end if


  #---------------------------------------------------------------------------------------------------  




  #***************************************************************************************************
  def __neg__(self):
    """
    PURPOSE: Negation overload.
    """
    #*************************************************************************************************
    
    cdef darr_t newmat = darr_neg(&self.arr)

    return dmat.create(&newmat)
  #---------------------------------------------------------------------------------------------------




  #***************************************************************************************************
  def __add__(self, other):
    """
    PURPOSE: Addition overload.
    """
    #*************************************************************************************************
    
    cdef darr_t res 
    cdef dmat lhs,rhs
    
    tlhs = type(self)
    trhs = type(other)
    
    if (tlhs == trhs):

      lhs = self
      rhs = other

      res = darr_sum_RR(&lhs.arr,&rhs.arr)
    
    elif (tlhs in number_types):
      
      rhs = other
      res = darr_sum_rR(self, &rhs.arr)

    elif (trhs in number_types):
        
      lhs = self
      res = darr_sum_rR(other, &lhs.arr)

    else:

      return NotImplemented

    # end if 
      
    return dmat.create(&res)

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __iadd__(self, other):
    """
    PURPOSE: Inplace addition overload.
    """
    #*************************************************************************************************

    return self + other

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __sub__(self, other):
    """
    PURPOSE: Subtraction overload.
    """
  #************************************************************************
    
    cdef darr_t res 
    cdef dmat lhs,rhs
    
    tlhs = type(self)
    trhs = type(other)
    
    if (tlhs == trhs):

      lhs = self
      rhs = other

      res = darr_sub_RR(&lhs.arr,&rhs.arr)
    
    elif (tlhs in number_types):
      
      rhs = other
      res = darr_sub_rR(self, &rhs.arr)

    elif (trhs in number_types):
        
      lhs = self
      res = darr_sub_Rr( &lhs.arr, other)

    else:

      return NotImplemented

    # end if 
      
    return dmat.create(&res)

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __isub__(self, other_in):
    """
    PURPOSE: Inplace subtraction overload.
    """
    #*************************************************************************************************
  
    return self - other_in

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __mul__(self, other):
    """ 
    PURPOSE: Multiplication overload.
    """
    #*************************************************************************************************
    
    cdef darr_t res 
    cdef dmat lhs,rhs
    
    tlhs = type(self)
    trhs = type(other)
    
    if (tlhs == trhs):

      lhs = self
      rhs = other

      res = darr_mul_RR(&lhs.arr,&rhs.arr)
    
    elif (tlhs in number_types):
      
      rhs = other
      res = darr_mul_rR(self, &rhs.arr)

    elif (trhs in number_types):
        
      lhs = self
      res = darr_mul_rR(other, &lhs.arr)

    else:

      return NotImplemented

    # end if 
      
    return dmat.create(&res)
    

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __imul__(self, other_in):
    """
    PURPOSE: Inplace multiplication overload.
    """
    #*************************************************************************************************

    return self * other_in

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  def __truediv__(self, other):
    """
    PURPOSE: Division overload.
    """
    #*************************************************************************************************
    
    cdef darr_t res 
    cdef dmat lhs,rhs
    
    tlhs = type(self)
    trhs = type(other)
    
    if (tlhs == trhs):

      lhs = self
      rhs = other

      res = darr_div_RR(&lhs.arr,&rhs.arr)
    
    elif (tlhs in number_types):
      
      rhs = other
      res = darr_div_rR(self, &rhs.arr)

    elif (trhs in number_types):
        
      lhs = self
      res = darr_div_Rr( &lhs.arr, other)

    else:

      return NotImplemented

    # end if 
      
    return dmat.create(&res)


  #---------------------------------------------------------------------------------------------------  

  #***************************************************************************************************
  cpdef np.ndarray[double, ndim=2] to_numpy(self):
    """
    PURPOSE: Interface to numpy representation.
    """
    #*************************************************************************************************

    return c_ptr_to_np_2darray_double(self.arr.p_data, self.arr.nrows, self.arr.ncols)

  #---------------------------------------------------------------------------------------------------    

  #***************************************************************************************************
  def __pow__(self, n,z):
    """
    PURPOSE: Power function.
    """
    #*************************************************************************************************

    return power(self,n)

  #---------------------------------------------------------------------------------------------------  


  #***************************************************************************************************
  cpdef copy(self):
    """
    PURPOSE: Copy the elements to new memory spaces.
    """
    #*************************************************************************************************
    
    cdef darr_t res = darr_copy(&self.arr)    
      
    return dmat.create(&res)

  #---------------------------------------------------------------------------------------------------  



# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# :::::::::::::::::::::::::::::::::::: END OF CLASS DMAT :::::::::::::::::::::::::::::::::::::::::::::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::







#*****************************************************************************************************
cpdef dmat dot(dmat A, dmat B):
  
  cdef darr_t res = darr_matmul( &A.arr, &B.arr )

  # TODO: Add check in python code.

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------


#*****************************************************************************************************
cpdef dmat invert(dmat A):
  
  cdef darr_t res = darr_invert( &A.arr )

  # TODO: Add check in python code.

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat transpose(dmat A):
  
  cdef darr_t res = darr_transpose( &A.arr )

  # TODO: Add check in python code.

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef coeff_t det(dmat A):
  
  return darr_det( &A.arr ) 

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat eye(uint64_t size):
  
  cdef darr_t res = darr_zeros(size,size)
  cdef uint64_t i;

  for i in range(size):

    darr_set_item_ij( 1.0, i, i,&res)

  # end for 


  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat zeros(uint64_t nrows,uint64_t ncols):
  
  cdef darr_t res = darr_zeros(nrows,ncols)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat ones(uint64_t nrows,uint64_t ncols):
  
  cdef darr_t res = darr_ones(nrows,ncols)

  return dmat.create(&res)
  
#-----------------------------------------------------------------------------------------------------












#*****************************************************************************************************
cpdef dmat atanh(dmat A):
  
  cdef darr_t res = darr_atanh(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat asinh(dmat A):
  
  cdef darr_t res = darr_asinh(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat acosh(dmat A):
  
  cdef darr_t res = darr_acosh(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat tanh(dmat A):
  
  cdef darr_t res = darr_tanh(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat sqrt(dmat A):
  
  cdef darr_t res = darr_sqrt(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat cosh(dmat A):
  
  cdef darr_t res = darr_cosh(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat sinh(dmat A):
  
  cdef darr_t res = darr_sinh(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat asin(dmat A):
  
  cdef darr_t res = darr_asin(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat acos(dmat A):
  
  cdef darr_t res = darr_acos(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat atan(dmat A):
  
  cdef darr_t res = darr_atan(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------



#*****************************************************************************************************
cpdef dmat tan(dmat A):
  
  cdef darr_t res = darr_tan(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat cos(dmat A):
  
  cdef darr_t res = darr_cos(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat sin(dmat A):
  
  cdef darr_t res = darr_sin(&A.arr )

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat log10(dmat A):
  
  cdef darr_t res = darr_log10(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat log(dmat A):
  
  cdef darr_t res = darr_log(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat exp(dmat A):
  
  cdef darr_t res = darr_exp(&A.arr)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat logb(dmat A,coeff_t b):
  
  cdef darr_t res = darr_logb(&A.arr,b)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------

#*****************************************************************************************************
cpdef dmat power(dmat A,coeff_t b):
  
  cdef darr_t res = darr_pow(&A.arr,b)

  return dmat.create(&res)

#-----------------------------------------------------------------------------------------------------





